{"id":"node_modules/t/t.js","dependencies":[{"name":"C:\\Users\\diana\\Desktop\\pageTransitions\\package.json","includedInParent":true,"mtime":1594488354403},{"name":"C:\\Users\\diana\\Desktop\\pageTransitions\\node_modules\\t\\package.json","includedInParent":true,"mtime":1594488354365}],"generated":{"js":"// version 0.5.1 ([source](https://github.com/aaronj1335/t-js))\n//\n// t-js is freely distributable under the MIT license\n//\n// <a href=\"https://travis-ci.org/aaronj1335/t-js\" target=_blank>\n//   <img src=\"https://api.travis-ci.org/aaronj1335/t-js.png?branch=master\">\n// </a>\n//\n\n// overview\n// ========\n// t.js is a tree-traversal library.  its only assumption is that the trees it\n// traverses are made up of objects with 'children' arrays:\n//\n//      {\n//          children: [\n//              { },\n//              {\n//                  children: [\n//                      { },\n//                      { }\n//                  ]\n//              }\n//          ]\n//      }\n//\n//  the actual property name is configurable. the traversals are entirely\n//  non-recursive, including the post-order traversal and `map()` functions,\n//  and it works inside the browser or out.\n//\n// testing\n// -------\n// there's a bunch of tests in `test/test.js`. you can run them along with the\n// linter with:\n//\n//     $ npm install && npm test\n//\n// or view them on most any system with a modern browser by opening the\n// `index.html` file.\n//\n// documentation is generated with the `grunt docs` target.\n//\n(function() {\n\n\n// usage\n// -----\n// the `t` interface is exported in either the browser or node.js. the library\n// can be installed from [npm](http://search.npmjs.org/#/t):\n//\n//     $ npm install t\n//\nvar _dfsPostOrder,\n    t = {},\n    root = this,\n    isArray = function(o) {\n        return Object.prototype.toString.call(o) === '[object Array]';\n    },\n    getChildrenName = function (config) {\n        return config.childrenName || 'children';\n    };\n\nif (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports)\n        exports = module.exports = t;\n    exports.t = t;\n} else {\n    root.t = t;\n}\n\n\n// available functions\n// ===================\n\n// t.bfs()\n// -------\n// perform a breadth-first search, executing the given callback at each node.\n//\n//      t.bfs(node, [config], function(node, par, ctrl) {\n//          /* ... */\n//      })\n//\n// - `node`:\n//      object where the search will start.  this could also be an array of\n//      objects\n// - `config`:\n//      you can define the name of the children property with\n//      `config.childrenName` (shoutout to @GianlucaGuarini)\n// - `callback` (last argument):\n//      function to be executed at each node.  the arguments are:\n//      - `node`: the current node\n//      - `par`: the current node's parent\n//      - `ctrl`: control object.  this doesn't currently do anything.\n//\n//  returns: the first `node` argument\n//\nt.bfs = function(node) {\n\n    var cur, callback, i, length, par, children,\n        isConfigSet = arguments.length === 3,\n        config = isConfigSet ? arguments[1] : {},\n        queue = isArray(node)? node.slice(0) : [node],\n        parents = [undefined],\n        childrenName = getChildrenName(config);\n\n    if (node == null) return node;\n\n    if (arguments.length >= 3) {\n        config = arguments[1];\n        callback = arguments[2];\n    } else {\n        config = {};\n        callback = arguments[1];\n    }\n\n    while (queue.length) {\n        cur = queue.shift();\n        par = parents.shift();\n        callback.call(cur, cur, par);\n        children = cur[childrenName] || [];\n        for (i = 0, length = children.length; i < length; i++) {\n            queue.push(children[i]);\n            parents.push(cur);\n        }\n    }\n\n    return node;\n};\n\n// t.dfs()\n// -------\n// perform a depth-first search, executing the given callback at each node.\n//\n//      t.dfs(node, [config], function(node, par, ctrl) {\n//          /* ... */\n//      })\n//\n//  in the pre-order case, `dfs()` doesn't process child nodes until after the\n//  callback.  so if you need to traverse an unknown tree, say a directory\n//  structure, you can start with just the root, and add child nodes as you go\n//  by appending them to `this.children` in the callback function.\n//\n// - `node`:\n//      object where the search will start.  this could also be an array of\n//      objects\n// - `config`:\n//      if this is an object w/ the 'order' property set to 'post', a\n//      post-order traversal will be performed.  this is generally worse\n//      performance, but the `callback` has access to the return values of its\n//      child nodes. you can define the name of the children property with\n//      `config.childrenName`\n// - `callback` (last argument):\n//      function to be executed at each node.  the arguments are:\n//      - `node`: the current node\n//      - `par`: the current node's parent\n//      - `ctrl`: control object.  setting the `stop` property of this will end\n//      the search, setting the `cutoff` property of this will not visit any\n//      children of this node\n//      - `ret`: return values of child nodes.  this is only set if `dfs()` is\n//      called with the `order` property set to `post`.\n//\n//  returns: the first `node` argument\n//\nt.dfs = function(node) {\n    var cur, par, children, ctrl, i, ret,\n        isConfigSet = arguments.length === 3,\n        nodes = isArray(node)? node.slice(0).reverse() : [node],\n        config = isConfigSet ? arguments[1] : {},\n        callback = arguments[isConfigSet ? 2 : 1],\n        parents = [],\n        childrenName = getChildrenName(config);\n    if (typeof nodes[0] === 'undefined' && nodes.length === 1) return;\n\n    if (config.order === 'post') {\n        ret = _dfsPostOrder(nodes, config, callback);\n        return isArray(node)? ret : ret[0];\n    }\n\n\n    for (i = nodes.length-1; i >= 0; i--)\n        parents.push(undefined);\n\n    while (nodes.length > 0) {\n        cur = nodes.pop();\n        par = parents.pop();\n\n        ctrl = {};\n        callback.call(cur, cur, par, ctrl);\n\n        if (ctrl.stop) break;\n\n        children = (cur && cur[childrenName])? cur[childrenName] : [];\n\n        for (i = ctrl.cutoff? -1 : children.length-1; i >= 0; i--) {\n            nodes.push(children[i]);\n            parents.push(cur);\n        }\n    }\n\n    return node;\n};\n\n// t.map()\n// -------\n// given a tree, return a tree of the same structure made up of the objects\n// returned by the callback which is executed at each node.  think of the\n// `underscore`'s `_.map()` function, or python's `map()`\n//\n//      t.map(node, [config], function(node, par) {\n//          /* ... */\n//      })\n//\n// - `node`:\n//      object where the traversal will start.  this could also be an array of\n//      objects\n// - `config`:\n//      you can define the name of the children property with\n//      `config.childrenName`\n// - `callback` (last argument):\n//      function to be executed at each node.  this must return an object.  the\n//      `map` function takes care of setting children.  the arguments are:\n//      - `node`: the current node\n//      - `par`: the current node's parent. note that this is the parent from\n//      the new tree that's being created.\n//\n//  returns: a new tree, mapped by the callback function\n//\nt.map = function() {\n    var node = arguments[0],\n        isConfigSet = arguments.length === 3,\n        config = isConfigSet ? arguments[1] : {},\n        filter = config.filter,\n        nodeFactory = arguments[isConfigSet ? 2 : 1],\n        ret = isArray(node)? [] : undefined,\n        last = function(l) { return l[l.length-1]; },\n        parentStack = [],\n        childrenName = getChildrenName(config);\n\n    t.dfs(node, config, function(n, par, ctrl) {\n        var curParent = last(parentStack),\n            newNode = nodeFactory(n, curParent? curParent.ret : undefined);\n\n        if (filter && ! newNode) {\n            ctrl.cutoff = true;\n            if (curParent && n === last(curParent.n[childrenName])) {\n                parentStack.pop();\n                if (curParent.ret[childrenName] &&\n                        ! curParent.ret[childrenName].length)\n                    delete curParent.ret[childrenName];\n            }\n            return;\n        }\n\n        if (! par) {\n            if (isArray(node))\n                ret.push(newNode);\n            else\n                ret = newNode;\n\n        } else {\n            curParent.ret[childrenName].push(newNode);\n\n            if (n === last(curParent.n[childrenName])) {\n                parentStack.pop();\n                if (curParent.ret[childrenName] &&\n                        ! curParent.ret[childrenName].length)\n                    delete curParent.ret[childrenName];\n            }\n        }\n\n        if (n[childrenName] && n[childrenName].length) {\n            newNode[childrenName] = [];\n            parentStack.push({n: n, ret: newNode});\n        }\n    });\n\n    return ret;\n};\n\n// t.filter()\n// ----------\n// given a tree, return a tree of the same structure made up of the objects\n// returned by the callback which is executed at each node.  if, however, at a\n// given node the callback returns a falsy value, then the current node and all\n// of its descendents will be pruned from the output tree.\n//\n//      t.filter(node, [config], function(node, par) {\n//          /* ... */\n//      })\n//\n// - `node`:\n//      object where the traversal will start.  this could also be an array of\n//      objects\n// - `config`:\n//      you can define the name of the children property with\n//      `config.childrenName`\n// - `callback` (last argument):\n//      function to be executed at each node.  this must return an object or a\n//      falsy value if the output tree should be pruned from the current node\n//      down.  the `filter` function takes care of setting children.  the\n//      arguments are:\n//      - `node`: the current node\n//      - `par`: the current node's parent. note that this is the parent from\n//      the new tree that's being created.\n//\n// returns: a new tree, filtered by the callback function\n//\nt.filter = function(node) {\n    var isConfigSet = arguments.length === 3,\n        nodeFactory =  arguments[isConfigSet ? 2 : 1],\n        config = isConfigSet ? arguments[1] : {};\n    return t.map(node, {\n        filter: true,\n        childrenName: config.childrenName\n    }, nodeFactory);\n};\n\n// t.stroll()\n// ----------\n//\n// _a walk through the trees..._\n//\n// given two trees of similar structure, traverse both trees at the same time,\n// executing the given callback with the pair of corresponding nodes as\n// arguments.\n//\n//      t.stroll(tree1, tree2, [config], function(node1, node2) {\n//          /* ... */\n//      })\n//\n// - `tree1`:\n//      the first tree of the traversal\n// - `node2`:\n//      the second tree of the traversal\n// - `config`:\n//      you can define the name of the children property with\n//      `config.childrenName`\n// - `callback` (last argument):\n//      function to be executed at each node. the arguments are:\n//      - `node1`: the node from the first tree\n//      - `node2`: the node from the second tree\n//\nt.stroll = function(tree1, tree2) {\n    var i, node2,\n        isConfigSet = arguments.length === 4,\n        callback =  arguments[ isConfigSet ? 3 : 2],\n        config = isConfigSet ? arguments[2] : {},\n        childrenName = getChildrenName(config),\n        nodes2 = isArray(tree2)? tree2.slice(0).reverse() : [tree2],\n        len = function(a) { return typeof a === 'undefined'? 0 : a.length; };\n\n    t.dfs(tree1, config, function(node1, par, ctrl) {\n        node2 = nodes2.pop();\n\n        callback(node1, node2);\n\n        if (node1 && node2 &&\n                len(node1[childrenName]) === len(node2[childrenName]))\n            for (i = (node2[childrenName] || []).length-1; i >= 0; i--)\n                nodes2.push(node2[childrenName][i]);\n        else\n            ctrl.cutoff = true;\n\n    });\n};\n\n// t.find()\n// ----------\n//\n// given a tree and a truth test, return the first node that responds with a\n// truthy value\n//\n//      t.find(tree, [config], function(node, par) {\n//          /* ... */\n//      })\n//\n// - `tree`:\n//      the tree in which to find the node\n// - `config`:\n//      you can define the name of the children property with\n//      `config.childrenName`\n// - `callback` (last argument):\n//      function to be executed at each node. if this function returns a truthy\n//      value, the traversal will stop and `find` will return the current node.\n//      the arguments are:\n//      - `node`: the current node\n//      - `par`: the parent of the current node\n//\n// returns: the found node\n//\nt.find = function( tree ) {\n    var found,\n        isConfigSet = arguments.length === 3,\n        callback =  arguments[ isConfigSet ? 2 : 1],\n        config = isConfigSet ? arguments[1] : {};\n    t.dfs(tree, config, function(node, par, ctrl) {\n        if (callback.call(node, node, par)) {\n            ctrl.stop = true;\n            found = this;\n        }\n    });\n\n    return found;\n};\n\n// _dfsPostOrder()\n// -----------------\n//\n// this is a module-private function used by `dfs()`\n_dfsPostOrder = function(nodes, config, callback) {\n    var cur, par, ctrl, node,\n        last = function(l) { return l[l.length-1]; },\n        ret = [],\n        stack = [{\n            node: nodes.pop(),\n            index: 0,\n            ret: []\n        }],\n        childrenName = getChildrenName(config);\n\n    while (stack.length) {\n        cur = last(stack);\n        node = cur.node;\n\n        if (node[childrenName] && node[childrenName].length) {\n            if (cur.index < node[childrenName].length) {\n                stack.push({\n                    node: node[childrenName][cur.index++],\n                    index: 0,\n                    ret: []\n                });\n                continue;\n            }\n        }\n\n        ctrl = {};\n        par = stack[stack.length-2];\n        if (par) {\n            par.ret.push(callback.call(node, node, par.node, ctrl, cur.ret));\n            stack.pop();\n        } else {\n            ret.push(callback.call(node, node, undefined, ctrl, cur.ret));\n            stack.pop();\n            if (nodes.length)\n                stack.push({\n                    node: nodes.pop(),\n                    index: 0,\n                    ret: []\n                });\n        }\n    }\n\n    return ret;\n};\n\n}());\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/t/t.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/t/t.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/t/t.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/t/t.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/t/t.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/t/t.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/t/t.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/t/t.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/t/t.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/t/t.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/t/t.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/t/t.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/t/t.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/t/t.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/t/t.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/t/t.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/t/t.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/t/t.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/t/t.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/t/t.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/t/t.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/t/t.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/t/t.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/t/t.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/t/t.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/t/t.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/t/t.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/t/t.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/t/t.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/t/t.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/t/t.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/t/t.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/t/t.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/t/t.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/t/t.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/t/t.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/t/t.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/t/t.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/t/t.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/t/t.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/t/t.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/t/t.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/t/t.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/t/t.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/t/t.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/t/t.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/t/t.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/t/t.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/t/t.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/t/t.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/t/t.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/t/t.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/t/t.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/t/t.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/t/t.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/t/t.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/t/t.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/t/t.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/t/t.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/t/t.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/t/t.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/t/t.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/t/t.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/t/t.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/t/t.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/t/t.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/t/t.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/t/t.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/t/t.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/t/t.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/t/t.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/t/t.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/t/t.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/t/t.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/t/t.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/t/t.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/t/t.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/t/t.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/t/t.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/t/t.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/t/t.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/t/t.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/t/t.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/t/t.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/t/t.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/t/t.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/t/t.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/t/t.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/t/t.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/t/t.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/t/t.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/t/t.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/t/t.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/t/t.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/t/t.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/t/t.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/t/t.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/t/t.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/t/t.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/t/t.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/t/t.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/t/t.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/t/t.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/t/t.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/t/t.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/t/t.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/t/t.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/t/t.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/t/t.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/t/t.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/t/t.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/t/t.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/t/t.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/t/t.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/t/t.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/t/t.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/t/t.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/t/t.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/t/t.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/t/t.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/t/t.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/t/t.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/t/t.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/t/t.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/t/t.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/t/t.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/t/t.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/t/t.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/t/t.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/t/t.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/t/t.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/t/t.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/t/t.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/t/t.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/t/t.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/t/t.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/t/t.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/t/t.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/t/t.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/t/t.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/t/t.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/t/t.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/t/t.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/t/t.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/t/t.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/t/t.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/t/t.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/t/t.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/t/t.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/t/t.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/t/t.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/t/t.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/t/t.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/t/t.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/t/t.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/t/t.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/t/t.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/t/t.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/t/t.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/t/t.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/t/t.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/t/t.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/t/t.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/t/t.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/t/t.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/t/t.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/t/t.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/t/t.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/t/t.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/t/t.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/t/t.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/t/t.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/t/t.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/t/t.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/t/t.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/t/t.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/t/t.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/t/t.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/t/t.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/t/t.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/t/t.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/t/t.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/t/t.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/t/t.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/t/t.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/t/t.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/t/t.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/t/t.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/t/t.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/t/t.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/t/t.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/t/t.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/t/t.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/t/t.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/t/t.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/t/t.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/t/t.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/t/t.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/t/t.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/t/t.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/t/t.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/t/t.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/t/t.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/t/t.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/t/t.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/t/t.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/t/t.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/t/t.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/t/t.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/t/t.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/t/t.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/t/t.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/t/t.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/t/t.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/t/t.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/t/t.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/t/t.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/t/t.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/t/t.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/t/t.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/t/t.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/t/t.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/t/t.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/t/t.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/t/t.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/t/t.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/t/t.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/t/t.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/t/t.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/t/t.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/t/t.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/t/t.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/t/t.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/t/t.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/t/t.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/t/t.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/t/t.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/t/t.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/t/t.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/t/t.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/t/t.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/t/t.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/t/t.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/t/t.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/t/t.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/t/t.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/t/t.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/t/t.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/t/t.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/t/t.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/t/t.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/t/t.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/t/t.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/t/t.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/t/t.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/t/t.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/t/t.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/t/t.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/t/t.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/t/t.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/t/t.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/t/t.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/t/t.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/t/t.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/t/t.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/t/t.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/t/t.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/t/t.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/t/t.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/t/t.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/t/t.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/t/t.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/t/t.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/t/t.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/t/t.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/t/t.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/t/t.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/t/t.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/t/t.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/t/t.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/t/t.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/t/t.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/t/t.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/t/t.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/t/t.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/t/t.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/t/t.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/t/t.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/t/t.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/t/t.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/t/t.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/t/t.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/t/t.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/t/t.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/t/t.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/t/t.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/t/t.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/t/t.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/t/t.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/t/t.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/t/t.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/t/t.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/t/t.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/t/t.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/t/t.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/t/t.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/t/t.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/t/t.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/t/t.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/t/t.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/t/t.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/t/t.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/t/t.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/t/t.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/t/t.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/t/t.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/t/t.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/t/t.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/t/t.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/t/t.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/t/t.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/t/t.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/t/t.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/t/t.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/t/t.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/t/t.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/t/t.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/t/t.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/t/t.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/t/t.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/t/t.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/t/t.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/t/t.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/t/t.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/t/t.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/t/t.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/t/t.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/t/t.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/t/t.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/t/t.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/t/t.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/t/t.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/t/t.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/t/t.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/t/t.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/t/t.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/t/t.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/t/t.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/t/t.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/t/t.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/t/t.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/t/t.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/t/t.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/t/t.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/t/t.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/t/t.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/t/t.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/t/t.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/t/t.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/t/t.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/t/t.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/t/t.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/t/t.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/t/t.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/t/t.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/t/t.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/t/t.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/t/t.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/t/t.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/t/t.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/t/t.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/t/t.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/t/t.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/t/t.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/t/t.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/t/t.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/t/t.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/t/t.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/t/t.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/t/t.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/t/t.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/t/t.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/t/t.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/t/t.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/t/t.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/t/t.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/t/t.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/t/t.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/t/t.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/t/t.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/t/t.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/t/t.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/t/t.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/t/t.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/t/t.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/t/t.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/t/t.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/t/t.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/t/t.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/t/t.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/t/t.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/t/t.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/t/t.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/t/t.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/t/t.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/t/t.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/t/t.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/t/t.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/t/t.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/t/t.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/t/t.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/t/t.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/t/t.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/t/t.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/t/t.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/t/t.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/t/t.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/t/t.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/t/t.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/t/t.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/t/t.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/t/t.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/t/t.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/t/t.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/t/t.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/t/t.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/t/t.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/t/t.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/t/t.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/t/t.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/t/t.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/t/t.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/t/t.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/t/t.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/t/t.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/t/t.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/t/t.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/t/t.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/t/t.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/t/t.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/t/t.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/t/t.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/t/t.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/t/t.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/t/t.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/t/t.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/t/t.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/t/t.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/t/t.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/t/t.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/t/t.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/t/t.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/t/t.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/t/t.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/t/t.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/t/t.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/t/t.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}}],"sources":{"node_modules/t/t.js":"// version 0.5.1 ([source](https://github.com/aaronj1335/t-js))\n//\n// t-js is freely distributable under the MIT license\n//\n// <a href=\"https://travis-ci.org/aaronj1335/t-js\" target=_blank>\n//   <img src=\"https://api.travis-ci.org/aaronj1335/t-js.png?branch=master\">\n// </a>\n//\n\n// overview\n// ========\n// t.js is a tree-traversal library.  its only assumption is that the trees it\n// traverses are made up of objects with 'children' arrays:\n//\n//      {\n//          children: [\n//              { },\n//              {\n//                  children: [\n//                      { },\n//                      { }\n//                  ]\n//              }\n//          ]\n//      }\n//\n//  the actual property name is configurable. the traversals are entirely\n//  non-recursive, including the post-order traversal and `map()` functions,\n//  and it works inside the browser or out.\n//\n// testing\n// -------\n// there's a bunch of tests in `test/test.js`. you can run them along with the\n// linter with:\n//\n//     $ npm install && npm test\n//\n// or view them on most any system with a modern browser by opening the\n// `index.html` file.\n//\n// documentation is generated with the `grunt docs` target.\n//\n(function() {\n\n\n// usage\n// -----\n// the `t` interface is exported in either the browser or node.js. the library\n// can be installed from [npm](http://search.npmjs.org/#/t):\n//\n//     $ npm install t\n//\nvar _dfsPostOrder,\n    t = {},\n    root = this,\n    isArray = function(o) {\n        return Object.prototype.toString.call(o) === '[object Array]';\n    },\n    getChildrenName = function (config) {\n        return config.childrenName || 'children';\n    };\n\nif (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports)\n        exports = module.exports = t;\n    exports.t = t;\n} else {\n    root.t = t;\n}\n\n\n// available functions\n// ===================\n\n// t.bfs()\n// -------\n// perform a breadth-first search, executing the given callback at each node.\n//\n//      t.bfs(node, [config], function(node, par, ctrl) {\n//          /* ... */\n//      })\n//\n// - `node`:\n//      object where the search will start.  this could also be an array of\n//      objects\n// - `config`:\n//      you can define the name of the children property with\n//      `config.childrenName` (shoutout to @GianlucaGuarini)\n// - `callback` (last argument):\n//      function to be executed at each node.  the arguments are:\n//      - `node`: the current node\n//      - `par`: the current node's parent\n//      - `ctrl`: control object.  this doesn't currently do anything.\n//\n//  returns: the first `node` argument\n//\nt.bfs = function(node) {\n\n    var cur, callback, i, length, par, children,\n        isConfigSet = arguments.length === 3,\n        config = isConfigSet ? arguments[1] : {},\n        queue = isArray(node)? node.slice(0) : [node],\n        parents = [undefined],\n        childrenName = getChildrenName(config);\n\n    if (node == null) return node;\n\n    if (arguments.length >= 3) {\n        config = arguments[1];\n        callback = arguments[2];\n    } else {\n        config = {};\n        callback = arguments[1];\n    }\n\n    while (queue.length) {\n        cur = queue.shift();\n        par = parents.shift();\n        callback.call(cur, cur, par);\n        children = cur[childrenName] || [];\n        for (i = 0, length = children.length; i < length; i++) {\n            queue.push(children[i]);\n            parents.push(cur);\n        }\n    }\n\n    return node;\n};\n\n// t.dfs()\n// -------\n// perform a depth-first search, executing the given callback at each node.\n//\n//      t.dfs(node, [config], function(node, par, ctrl) {\n//          /* ... */\n//      })\n//\n//  in the pre-order case, `dfs()` doesn't process child nodes until after the\n//  callback.  so if you need to traverse an unknown tree, say a directory\n//  structure, you can start with just the root, and add child nodes as you go\n//  by appending them to `this.children` in the callback function.\n//\n// - `node`:\n//      object where the search will start.  this could also be an array of\n//      objects\n// - `config`:\n//      if this is an object w/ the 'order' property set to 'post', a\n//      post-order traversal will be performed.  this is generally worse\n//      performance, but the `callback` has access to the return values of its\n//      child nodes. you can define the name of the children property with\n//      `config.childrenName`\n// - `callback` (last argument):\n//      function to be executed at each node.  the arguments are:\n//      - `node`: the current node\n//      - `par`: the current node's parent\n//      - `ctrl`: control object.  setting the `stop` property of this will end\n//      the search, setting the `cutoff` property of this will not visit any\n//      children of this node\n//      - `ret`: return values of child nodes.  this is only set if `dfs()` is\n//      called with the `order` property set to `post`.\n//\n//  returns: the first `node` argument\n//\nt.dfs = function(node) {\n    var cur, par, children, ctrl, i, ret,\n        isConfigSet = arguments.length === 3,\n        nodes = isArray(node)? node.slice(0).reverse() : [node],\n        config = isConfigSet ? arguments[1] : {},\n        callback = arguments[isConfigSet ? 2 : 1],\n        parents = [],\n        childrenName = getChildrenName(config);\n    if (typeof nodes[0] === 'undefined' && nodes.length === 1) return;\n\n    if (config.order === 'post') {\n        ret = _dfsPostOrder(nodes, config, callback);\n        return isArray(node)? ret : ret[0];\n    }\n\n\n    for (i = nodes.length-1; i >= 0; i--)\n        parents.push(undefined);\n\n    while (nodes.length > 0) {\n        cur = nodes.pop();\n        par = parents.pop();\n\n        ctrl = {};\n        callback.call(cur, cur, par, ctrl);\n\n        if (ctrl.stop) break;\n\n        children = (cur && cur[childrenName])? cur[childrenName] : [];\n\n        for (i = ctrl.cutoff? -1 : children.length-1; i >= 0; i--) {\n            nodes.push(children[i]);\n            parents.push(cur);\n        }\n    }\n\n    return node;\n};\n\n// t.map()\n// -------\n// given a tree, return a tree of the same structure made up of the objects\n// returned by the callback which is executed at each node.  think of the\n// `underscore`'s `_.map()` function, or python's `map()`\n//\n//      t.map(node, [config], function(node, par) {\n//          /* ... */\n//      })\n//\n// - `node`:\n//      object where the traversal will start.  this could also be an array of\n//      objects\n// - `config`:\n//      you can define the name of the children property with\n//      `config.childrenName`\n// - `callback` (last argument):\n//      function to be executed at each node.  this must return an object.  the\n//      `map` function takes care of setting children.  the arguments are:\n//      - `node`: the current node\n//      - `par`: the current node's parent. note that this is the parent from\n//      the new tree that's being created.\n//\n//  returns: a new tree, mapped by the callback function\n//\nt.map = function() {\n    var node = arguments[0],\n        isConfigSet = arguments.length === 3,\n        config = isConfigSet ? arguments[1] : {},\n        filter = config.filter,\n        nodeFactory = arguments[isConfigSet ? 2 : 1],\n        ret = isArray(node)? [] : undefined,\n        last = function(l) { return l[l.length-1]; },\n        parentStack = [],\n        childrenName = getChildrenName(config);\n\n    t.dfs(node, config, function(n, par, ctrl) {\n        var curParent = last(parentStack),\n            newNode = nodeFactory(n, curParent? curParent.ret : undefined);\n\n        if (filter && ! newNode) {\n            ctrl.cutoff = true;\n            if (curParent && n === last(curParent.n[childrenName])) {\n                parentStack.pop();\n                if (curParent.ret[childrenName] &&\n                        ! curParent.ret[childrenName].length)\n                    delete curParent.ret[childrenName];\n            }\n            return;\n        }\n\n        if (! par) {\n            if (isArray(node))\n                ret.push(newNode);\n            else\n                ret = newNode;\n\n        } else {\n            curParent.ret[childrenName].push(newNode);\n\n            if (n === last(curParent.n[childrenName])) {\n                parentStack.pop();\n                if (curParent.ret[childrenName] &&\n                        ! curParent.ret[childrenName].length)\n                    delete curParent.ret[childrenName];\n            }\n        }\n\n        if (n[childrenName] && n[childrenName].length) {\n            newNode[childrenName] = [];\n            parentStack.push({n: n, ret: newNode});\n        }\n    });\n\n    return ret;\n};\n\n// t.filter()\n// ----------\n// given a tree, return a tree of the same structure made up of the objects\n// returned by the callback which is executed at each node.  if, however, at a\n// given node the callback returns a falsy value, then the current node and all\n// of its descendents will be pruned from the output tree.\n//\n//      t.filter(node, [config], function(node, par) {\n//          /* ... */\n//      })\n//\n// - `node`:\n//      object where the traversal will start.  this could also be an array of\n//      objects\n// - `config`:\n//      you can define the name of the children property with\n//      `config.childrenName`\n// - `callback` (last argument):\n//      function to be executed at each node.  this must return an object or a\n//      falsy value if the output tree should be pruned from the current node\n//      down.  the `filter` function takes care of setting children.  the\n//      arguments are:\n//      - `node`: the current node\n//      - `par`: the current node's parent. note that this is the parent from\n//      the new tree that's being created.\n//\n// returns: a new tree, filtered by the callback function\n//\nt.filter = function(node) {\n    var isConfigSet = arguments.length === 3,\n        nodeFactory =  arguments[isConfigSet ? 2 : 1],\n        config = isConfigSet ? arguments[1] : {};\n    return t.map(node, {\n        filter: true,\n        childrenName: config.childrenName\n    }, nodeFactory);\n};\n\n// t.stroll()\n// ----------\n//\n// _a walk through the trees..._\n//\n// given two trees of similar structure, traverse both trees at the same time,\n// executing the given callback with the pair of corresponding nodes as\n// arguments.\n//\n//      t.stroll(tree1, tree2, [config], function(node1, node2) {\n//          /* ... */\n//      })\n//\n// - `tree1`:\n//      the first tree of the traversal\n// - `node2`:\n//      the second tree of the traversal\n// - `config`:\n//      you can define the name of the children property with\n//      `config.childrenName`\n// - `callback` (last argument):\n//      function to be executed at each node. the arguments are:\n//      - `node1`: the node from the first tree\n//      - `node2`: the node from the second tree\n//\nt.stroll = function(tree1, tree2) {\n    var i, node2,\n        isConfigSet = arguments.length === 4,\n        callback =  arguments[ isConfigSet ? 3 : 2],\n        config = isConfigSet ? arguments[2] : {},\n        childrenName = getChildrenName(config),\n        nodes2 = isArray(tree2)? tree2.slice(0).reverse() : [tree2],\n        len = function(a) { return typeof a === 'undefined'? 0 : a.length; };\n\n    t.dfs(tree1, config, function(node1, par, ctrl) {\n        node2 = nodes2.pop();\n\n        callback(node1, node2);\n\n        if (node1 && node2 &&\n                len(node1[childrenName]) === len(node2[childrenName]))\n            for (i = (node2[childrenName] || []).length-1; i >= 0; i--)\n                nodes2.push(node2[childrenName][i]);\n        else\n            ctrl.cutoff = true;\n\n    });\n};\n\n// t.find()\n// ----------\n//\n// given a tree and a truth test, return the first node that responds with a\n// truthy value\n//\n//      t.find(tree, [config], function(node, par) {\n//          /* ... */\n//      })\n//\n// - `tree`:\n//      the tree in which to find the node\n// - `config`:\n//      you can define the name of the children property with\n//      `config.childrenName`\n// - `callback` (last argument):\n//      function to be executed at each node. if this function returns a truthy\n//      value, the traversal will stop and `find` will return the current node.\n//      the arguments are:\n//      - `node`: the current node\n//      - `par`: the parent of the current node\n//\n// returns: the found node\n//\nt.find = function( tree ) {\n    var found,\n        isConfigSet = arguments.length === 3,\n        callback =  arguments[ isConfigSet ? 2 : 1],\n        config = isConfigSet ? arguments[1] : {};\n    t.dfs(tree, config, function(node, par, ctrl) {\n        if (callback.call(node, node, par)) {\n            ctrl.stop = true;\n            found = this;\n        }\n    });\n\n    return found;\n};\n\n// _dfsPostOrder()\n// -----------------\n//\n// this is a module-private function used by `dfs()`\n_dfsPostOrder = function(nodes, config, callback) {\n    var cur, par, ctrl, node,\n        last = function(l) { return l[l.length-1]; },\n        ret = [],\n        stack = [{\n            node: nodes.pop(),\n            index: 0,\n            ret: []\n        }],\n        childrenName = getChildrenName(config);\n\n    while (stack.length) {\n        cur = last(stack);\n        node = cur.node;\n\n        if (node[childrenName] && node[childrenName].length) {\n            if (cur.index < node[childrenName].length) {\n                stack.push({\n                    node: node[childrenName][cur.index++],\n                    index: 0,\n                    ret: []\n                });\n                continue;\n            }\n        }\n\n        ctrl = {};\n        par = stack[stack.length-2];\n        if (par) {\n            par.ret.push(callback.call(node, node, par.node, ctrl, cur.ret));\n            stack.pop();\n        } else {\n            ret.push(callback.call(node, node, undefined, ctrl, cur.ret));\n            stack.pop();\n            if (nodes.length)\n                stack.push({\n                    node: nodes.pop(),\n                    index: 0,\n                    ret: []\n                });\n        }\n    }\n\n    return ret;\n};\n\n}());\n"},"lineCount":457}},"error":null,"hash":"3afb5e8078029b6bbfe8e3546b705538","cacheData":{"env":{}}}